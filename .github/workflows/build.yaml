name: build-release-package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the package to build'
        required: true
        default: '0.1.0'
      release_notes:
        description: 'Release notes for the package'
        required: false
        default: 'Initial release of the package'
      testing_only:
        description: 'Run only the test build'
        required: false
        default: 'false'


permissions:
 contents: write


jobs:
  test_package:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[dev]

      - name: Run tests
        run: |
          pytest tests/

      - name: Notify completion
        run: echo "Tests completed successfully."
        if: success()

      - name: Notify failure
        run: echo "Tests failed."
        if: failure()

  build_package-test:
    runs-on: ubuntu-latest
    environment: test
    if: ${{ github.event.inputs.testing_only == 'false' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      VERSION: ${{ github.event.inputs.version }}
      PACKAGE_NAME: 'shaksz'
      PACKAGE_DESCRIPTION: 'All coding and design solutions as package'
      PACKAGE_AUTHOR: 'Varun Verma'
      PACKAGE_AUTHOR_EMAIL: 'vermavarun@outlook.com'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[dev]

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload package to TestPyPI
        run: |
          python -m pip install --upgrade twine
          twine upload --repository-url https://test.pypi.org/legacy/ dist/* -u __token__ -p ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Notify completion
        run: echo "Release v${{ github.event.inputs.version }} has been created successfully."
        if: success()

      - name: Notify failure
        run: echo "Release v${{ github.event.inputs.version }} failed to create."
        if: failure()

      - name: Clean up
        run: |
          rm -rf dist
          rm -rf build
          rm -rf *.egg-info
        if: always()

      - name: Finalize
        run: echo "Build and release process completed."
        if: always()

  build_package-prod:
    runs-on: ubuntu-latest
    environment: prod
    needs: [build_package-test]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      VERSION: ${{ github.event.inputs.version }}
      PACKAGE_NAME: 'shaksz'
      PACKAGE_DESCRIPTION: 'All coding and design solutions as package'
      PACKAGE_AUTHOR: 'Varun Verma'
      PACKAGE_AUTHOR_EMAIL: 'vermavarun@outlook.com'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install .[dev]

      - name: Build package
        run: |
          python setup.py sdist bdist_wheel

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: dist/*

      - name: Upload package to PyPI
        run: |
          python -m pip install --upgrade twine
          twine upload --repository-url https://upload.pypi.org/legacy/ dist/*  -u __token__ -p ${{ secrets.PYPI_TOKEN }}

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: |
            Release notes: ${{ github.event.inputs.release_notes }}
          draft: false
          prerelease: false
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify completion
        run: echo "Release v${{ github.event.inputs.version }} has been created successfully."
        if: success()

      - name: Notify failure
        run: echo "Release v${{ github.event.inputs.version }} failed to create."
        if: failure()

      - name: Clean up
        run: |
          rm -rf dist
          rm -rf build
          rm -rf *.egg-info
        if: always()

      - name: Finalize
        run: echo "Build and release process completed."
        if: always()
